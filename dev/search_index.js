var documenterSearchIndex = {"docs":
[{"location":"library/#Library","page":"Library","title":"Library","text":"","category":"section"},{"location":"library/#Newsvendor-Model","page":"Library","title":"Newsvendor Model","text":"","category":"section"},{"location":"library/","page":"Library","title":"Library","text":"NVModel","category":"page"},{"location":"library/#NewsvendorModel.NVModel","page":"Library","title":"NewsvendorModel.NVModel","text":"NVModel(c, p, d)\n\nDefine a Newsvendor model with unit cost c, unit selling price p, and  demand distribution d. Note that d is assumed to be a univariate distribution  from the package Distributions.jl.\n\nExamples\n\njulia> using Distributions\njulia> nvm = NVModel(1, 5, Normal(90, 30))\n\nThis defines a model with unit cost 1, unit price 5, and a demand distributed  that follows normal distribution with mean 90 and standard deviation 30.\n\nFurther keyword arguments:\n\nNVModel(c, p, d [; salvage = 0, backlog = 0, fixcost = 0])\n\nsalvage = unit salvage value; defaults to 0\nbacklog = unit backlog penalty (e.g., penalty if not delivered or missed future profit for each unserved customer); defaults to 0\nfixcost = fixed cost; defaults to 0\n\nExamples\n\njulia> using Distributions\njulia> nvm2 = NVModel(1, 5, Normal(90, 30), salvage = 0.5, backlog = 2, fixcost = 100)\n\ndefines a newsvendor problem where c = 1, p = 5, d = Normal(90, 30), the salvage value = 0.5, unit backlog penalty = 2, and fixed cost of the operation = 100. \n\nExternal links\n\nNewsvendor model on Wikipedia\n\n\n\n\n\n","category":"type"},{"location":"library/#Optimizing-expected-profit","page":"Library","title":"Optimizing expected profit","text":"","category":"section"},{"location":"library/","page":"Library","title":"Library","text":"optimize","category":"page"},{"location":"library/#NewsvendorModel.optimize","page":"Library","title":"NewsvendorModel.optimize","text":"optimize(nvm::NVModel [; rounduprule = true])\n\nCompute profit maximizing stocking quantity q and the metrics when using it. The optimal quantity is rounded up to the next integer by default. To get the  exact real number, set the keyword arguement rounduprule = false.\n\n\n\n\n\n","category":"function"},{"location":"library/#Abstract-NewsvendorProblem","page":"Library","title":"Abstract NewsvendorProblem","text":"","category":"section"},{"location":"library/","page":"Library","title":"Library","text":"NewsvendorProblem","category":"page"},{"location":"library/#NewsvendorModel.NewsvendorProblem","page":"Library","title":"NewsvendorModel.NewsvendorProblem","text":"An abstract newsvendor problem is essentially described by having a\n\ndemand distribution,\ncost of overage, \ncost of underage, and \nprofitshift term.\n\nIts standard concrete type might come as a NewsvendorModel, defined by unit cost, uni selling price etc.\n\n\n\n\n\n","category":"type"},{"location":"library/#Required-functions-that-determine-a-newsvendor-problem","page":"Library","title":"Required functions that determine a newsvendor problem","text":"","category":"section"},{"location":"library/","page":"Library","title":"Library","text":"overagecost(::NewsvendorProblem)\nunderagecost(::NewsvendorProblem)\ndistr(::NewsvendorProblem)\nprofitshift(::NewsvendorProblem)","category":"page"},{"location":"library/#NewsvendorModel.overagecost-Tuple{NewsvendorProblem}","page":"Library","title":"NewsvendorModel.overagecost","text":"overage(nvpr::NewsvendorProblem)\n\nGet the cost of overage of a newsvendor problem.\n\n\n\n\n\n","category":"method"},{"location":"library/#NewsvendorModel.underagecost-Tuple{NewsvendorProblem}","page":"Library","title":"NewsvendorModel.underagecost","text":"underage(nvpr::NewsvendorProblem)\n\nGet the cost of underage of a newsvendor problem.\n\n\n\n\n\n","category":"method"},{"location":"library/#NewsvendorModel.distr-Tuple{NewsvendorProblem}","page":"Library","title":"NewsvendorModel.distr","text":"distr(nvpr::NewsvendorProblem)\n\nGet the demand distribution of a newsvendor problem.\n\n\n\n\n\n","category":"method"},{"location":"library/#NewsvendorModel.profitshift-Tuple{NewsvendorProblem}","page":"Library","title":"NewsvendorModel.profitshift","text":"profitshift(nvpr::NewsvendorProblem)\n\nDefine how profit is shifted because of fixed cost, penalty, etc.; defautls to 0.\n\n\n\n\n\n","category":"method"},{"location":"library/#Quantities-of-interest","page":"Library","title":"Quantities of interest","text":"","category":"section"},{"location":"library/","page":"Library","title":"Library","text":"q_opt\nscarf","category":"page"},{"location":"library/#NewsvendorModel.q_opt","page":"Library","title":"NewsvendorModel.q_opt","text":"q_opt(nvpr::NewsvendorProblem; rounduprule = true)\n\nCompute the quanitity that maximizes expected profit for a newsvendor problem (i.e., where critical fractile equals in-stock probability). Relies on the  equation\n\nF(q_opt) = textrmcritical fractile \n\nwhere F is the c.d.f. of the demand distribution. Returns the next integer unless rounduprule=false; then, it returns exact real.\n\n\n\n\n\nq_opt(res::NvOptimizationResult)\n\nGet optimal quantity from a stored result.\n\n\n\n\n\n","category":"function"},{"location":"library/#Metrics","page":"Library","title":"Metrics","text":"","category":"section"},{"location":"library/","page":"Library","title":"Library","text":"criticalfractile\nprofit\nmissmatch\nlostsales\nsales\nleftover","category":"page"},{"location":"library/#NewsvendorModel.criticalfractile","page":"Library","title":"NewsvendorModel.criticalfractile","text":"criticalfractile(nvpr::NewsvendorProblem)\n\nCompute the critical fractile for a newsvendor problem:\n\ntextrmcritical fractile = fractextrmunderage costtextrmunderage cost + textrmoverage cost\n\n\n\n\n\ncriticalfractile(res::NvOptimizationResult)\n\nGet critical fractile from a stored result.\n\n\n\n\n\n","category":"function"},{"location":"library/#NewsvendorModel.profit","page":"Library","title":"NewsvendorModel.profit","text":"profit(nvpr::NewsvendorProblem, q)\n\nCompute expected left over quantity when stocking quantity q. It is given by\n\ntextrmmissmatch = textrmunderagecost times  mu - textrmmissmatch +  textrmprofitshift\n\n\n\n\n\nprofit(res::NvOptimizationResult)\n\nGet expected profit from a stored result.\n\n\n\n\n\n","category":"function"},{"location":"library/#NewsvendorModel.missmatch","page":"Library","title":"NewsvendorModel.missmatch","text":"missmatch(nvpr::NewsvendorProblem, q)\n\nCompute expected missmatch when stocking quantity q. It is given by\n\ntextrmmissmatch cost = textrmunderage cost \times  textrmlost sales + textrmoverage cost \times  textrmleft over\n\n\n\n\n\n","category":"function"},{"location":"library/#NewsvendorModel.lostsales","page":"Library","title":"NewsvendorModel.lostsales","text":"lostsales(nvpr::NewsvendorProblem, q)\n\nCompute expected lost sales when stocking quantity q.\n\n\n\n\n\nlostsales(res::NvOptimizationResult)\n\nGet expected lost sales model from a stored result.\n\n\n\n\n\n","category":"function"},{"location":"library/#NewsvendorModel.sales","page":"Library","title":"NewsvendorModel.sales","text":"sales(nvpr::NewsvendorProblem, q)\n\nCompute expected sales when stocking quantity q.\n\n\n\n\n\nsales(res::NvOptimizationResult)\n\nGet expected sales from a stored result.\n\n\n\n\n\n","category":"function"},{"location":"library/#NewsvendorModel.leftover","page":"Library","title":"NewsvendorModel.leftover","text":"leftover(nvpr::NewsvendorProblem, q)\n\nCompute expected left over quantity when stocking quantity q.\n\n\n\n\n\nleftover(res::NvOptimizationResult)\n\nGet expected left over from a stored result.\n\n\n\n\n\n","category":"function"},{"location":"","page":"Quick start","title":"Quick start","text":"This is a Julia package for modeling and solving Newsvendor Problems.","category":"page"},{"location":"#Quick-start","page":"Quick start","title":"Quick start","text":"","category":"section"},{"location":"","page":"Quick start","title":"Quick start","text":"The package is not yet listed and must be retrieved from the Github repo.","category":"page"},{"location":"","page":"Quick start","title":"Quick start","text":"julia> import Pkg\njulia> Pkg.add(url=\"https://github.com/frankhuettner/NewsvendorModel.jl\")","category":"page"},{"location":"","page":"Quick start","title":"Quick start","text":"After installation, it can be loaded with the usual command.","category":"page"},{"location":"","page":"Quick start","title":"Quick start","text":"julia> using NewsvendorModel","category":"page"},{"location":"","page":"Quick start","title":"Quick start","text":"Moreover, you need to load the distributions package.","category":"page"},{"location":"","page":"Quick start","title":"Quick start","text":"julia> using Distributions","category":"page"},{"location":"","page":"Quick start","title":"Quick start","text":"You can now define a model with the command NVModel(...) using the following required arguements (in that order):","category":"page"},{"location":"","page":"Quick start","title":"Quick start","text":"unit production cost\nunit selling price\ndemand distribution","category":"page"},{"location":"","page":"Quick start","title":"Quick start","text":"Solve for optimal quanitity and obtain key metrics with the optimize() function.","category":"page"},{"location":"#Example","page":"Quick start","title":"Example","text":"","category":"section"},{"location":"","page":"Quick start","title":"Quick start","text":"Consider a scenario with ","category":"page"},{"location":"","page":"Quick start","title":"Quick start","text":"unit cost = 1  \nunit price = 5\ndemand that follows a normal distribution with \nmean = 90 \nstandard deviation = 30","category":"page"},{"location":"","page":"Quick start","title":"Quick start","text":"The model is now defined and stored in the variable nvm as follows:","category":"page"},{"location":"","page":"Quick start","title":"Quick start","text":"julia> nvm = NVModel(1, 5, Normal(90, 30))","category":"page"},{"location":"","page":"Quick start","title":"Quick start","text":"Julia shows the model data:","category":"page"},{"location":"","page":"Quick start","title":"Quick start","text":"Data of the Newsvendor Model\n * Unit cost: 1.00\n * Unit selling price: 5.00\n * Demand distribution: Normal{Float64}(μ=90.0, σ=30.0)\n * Unit salvage value: 0.00\n * Unit backlog penalty: 0.00\n * Fixed cost: 0.00","category":"page"},{"location":"","page":"Quick start","title":"Quick start","text":"Next, you can solve the model like so:","category":"page"},{"location":"","page":"Quick start","title":"Quick start","text":"julia> res = optimize(nvm)","category":"page"},{"location":"","page":"Quick start","title":"Quick start","text":"This gives the following output:","category":"page"},{"location":"","page":"Quick start","title":"Quick start","text":"=====================================\nResults of maximizing expected profit\n * Optimal quantity: 116\n * Expected profit: 317.99\n=====================================\nThis is a consequence of\n * Cost of underage: 4.00\n * Cost of ovderage: 1.00\n * The critical fractile: 0.80\n * Usage of round-up rule: true\n-------------------------------------\nOrdering the optimal quantity yields\n * Expected sales: 86.80\n * Expected lost sales: 3.20\n * Expected left over: 29.20\n * Expected backlog penalty: 0.00\n-------------------------------------","category":"page"},{"location":"","page":"Quick start","title":"Quick start","text":"Moreover, you have stored the result in the varial res. Reading the data from the stored result is straight-forward:","category":"page"},{"location":"","page":"Quick start","title":"Quick start","text":"julia> q_opt(res)\n116","category":"page"},{"location":"","page":"Quick start","title":"Quick start","text":"julia> profit(res)\n317.9926337188953","category":"page"},{"location":"","page":"Quick start","title":"Quick start","text":"Analogously, underagecost(res), overagecost(res), criticalfractile(res),  rounduprule(res), sales(res), lostsales(res), leftover(res), penalty(res),  read the other information the stored result res. The model that was solved  can be retrieved with nvmodel(res).","category":"page"},{"location":"#Further-options","page":"Quick start","title":"Further options","text":"","category":"section"},{"location":"","page":"Quick start","title":"Quick start","text":"Consider a sligth variation of the example above. ","category":"page"},{"location":"#Demand-distribution","page":"Quick start","title":"Demand distribution","text":"","category":"section"},{"location":"","page":"Quick start","title":"Quick start","text":"Let us rule out demand below zero, i.e., let us truncate the distribution at 0. Working with distributions is very convinient in Julia. We can define our distribution of choice as follows: ","category":"page"},{"location":"","page":"Quick start","title":"Quick start","text":"julia> my_distr = truncated(Normal(90, 30), 0, Inf)\nTruncated(Normal{Float64}(μ=90.0, σ=30.0), range=(0.0, Inf))","category":"page"},{"location":"","page":"Quick start","title":"Quick start","text":"Note that this package shall work with any univariate distribution from the Distributions.jl package.","category":"page"},{"location":"#Salvage-value,-backlog-penalty,-and-fixed-cost","page":"Quick start","title":"Salvage value, backlog penalty, and fixed cost","text":"","category":"section"},{"location":"","page":"Quick start","title":"Quick start","text":"Further, suppose that","category":"page"},{"location":"","page":"Quick start","title":"Quick start","text":"an unsold unit can be salvaged for 0\nnot serving a demanded unit not only misses out on profit but also comes at a backlog penalty of 2\nthe operations require a fixed cost of 100","category":"page"},{"location":"","page":"Quick start","title":"Quick start","text":"The model is now specified as follows:","category":"page"},{"location":"","page":"Quick start","title":"Quick start","text":"julia> nvm2 = NVModel(1, 5, my_distr, salvage = 0.3, backlog = 2, fixcost = 100)\nData of the Newsvendor Model\n * Unit cost: 1.00\n * Unit selling price: 5.00\n * Demand distribution: Truncated(Normal{Float64}(μ=90.0, σ=30.0), range=(0.0, Inf))\n * Unit salvage value: 0.30\n * Unit backlog penalty: 2.00\n * Fixed cost: 100.00","category":"page"},{"location":"#Round-up-rule","page":"Quick start","title":"Round-up rule","text":"","category":"section"},{"location":"","page":"Quick start","title":"Quick start","text":"Finally, let us assume that we do not want the optimal integer quantity but the exact real number. To this end, we will call the optimize function with the  additional argument rounduprule=false.","category":"page"},{"location":"","page":"Quick start","title":"Quick start","text":"You solve the model like so:","category":"page"},{"location":"","page":"Quick start","title":"Quick start","text":"julia> optimize(nvm2, rounduprule=false)\n=====================================\nResults of maximizing expected profit\n * Optimal quantity: 127.72\n * Expected profit: 224.19\n=====================================\nThis is a consequence of\n * Cost of underage: 6.00\n * Cost of ovderage: 0.70\n * The critical fractile: 0.90\n * Usage of round-up rule: false\n-------------------------------------\nOrdering the optimal quantity yields\n * Expected sales: 88.64\n * Expected lost sales: 1.50\n * Expected left over: 39.08\n * Expected backlog penalty: 2.99\n-------------------------------------","category":"page"}]
}
