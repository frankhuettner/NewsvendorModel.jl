var documenterSearchIndex = {"docs":
[{"location":"library/#Library","page":"Library","title":"Library","text":"","category":"section"},{"location":"library/#Newsvendor-Model","page":"Library","title":"Newsvendor Model","text":"","category":"section"},{"location":"library/","page":"Library","title":"Library","text":"NVModel","category":"page"},{"location":"library/#NewsvendorModel.NVModel","page":"Library","title":"NewsvendorModel.NVModel","text":"NVModel(c, p, d)\n\nDefine a Newsvendor model with unit cost c, unit selling price p, and  demand distribution d. Note that d is assumed to be a univariate distribution  from the package Distributions.jl.\n\nExamples\n\njulia> using Distributions\njulia> nvm = NVModel(1, 5, Normal(90, 30))\n\ndefines a situation with c = 1, p = 5, and a demand distributed according to d,  being a normal distribution with mean 90 and standard deviation 30.\n\nNVModel(c, p, d [; salvage = 0, badwill = 0, fixcost = 0])\n\nAs above with optional keyword arguements are \n\nsalvage = unit salvage value; defaults to 0\nbadwill = unit lost goodwill (e.g., missed future profit for each unserved \n\ncustomer); defaults to 0\n\nfixcost = fixed cost; defaults to 0\n\nExamples\n\njulia> using Distributions\njulia> nvm2 = NVModel(1, 5, Normal(90, 30), salvage = 0.5, badwill = 2, fixcost = 100)\n\ndefines a newsvendor problem where c = 1, p = 5, d = Normal(90, 30), the salvage value is 0.5, unit badwill = 2, and fixed cost of the operation is 100. \n\nExternal links\n\nNewsvendor model on Wikipedia\n\n\n\n\n\n","category":"type"},{"location":"library/#Optimizing-expected-profit","page":"Library","title":"Optimizing expected profit","text":"","category":"section"},{"location":"library/","page":"Library","title":"Library","text":"optimize","category":"page"},{"location":"library/#NewsvendorModel.optimize","page":"Library","title":"NewsvendorModel.optimize","text":"optimize(nvm::NVModel)\n\nCompute profit maximizing stocking quantity q and the metrics when using it.\n\n\n\n\n\n","category":"function"},{"location":"library/#Abstract-NewsvendorProblem","page":"Library","title":"Abstract NewsvendorProblem","text":"","category":"section"},{"location":"library/","page":"Library","title":"Library","text":"NewsvendorProblem","category":"page"},{"location":"library/#NewsvendorModel.NewsvendorProblem","page":"Library","title":"NewsvendorModel.NewsvendorProblem","text":"An abstract newsvendor problem is essentially described by having a\n\ndemand distribution,\ncost of overage, \ncost of underage, and \nprofitshift term.\n\nIts standard concrete type might come as a NewsvendorModel, defined by unit cost, uni selling price etc.\n\n\n\n\n\n","category":"type"},{"location":"library/#Required-functions-that-determine-a-newsvendor-problem","page":"Library","title":"Required functions that determine a newsvendor problem","text":"","category":"section"},{"location":"library/","page":"Library","title":"Library","text":"overage\nunderage\ndistr\nprofitshift","category":"page"},{"location":"library/#NewsvendorModel.distr","page":"Library","title":"NewsvendorModel.distr","text":"distr(nvpr::NewsvendorProblem)\n\nGet the demand distribution of a newsvendor problem.\n\n\n\n\n\n","category":"function"},{"location":"library/#NewsvendorModel.profitshift","page":"Library","title":"NewsvendorModel.profitshift","text":"profitshift(nvpr::NewsvendorProblem)\n\nDefine how profit is shifted because of fixed cost or virtual profits;  defautls to 0.\n\n\n\n\n\nAt q=0, expected profit = - fixed cost - μ × badwill\n\n\n\n\n\n","category":"function"},{"location":"library/#Quantities-of-interest","page":"Library","title":"Quantities of interest","text":"","category":"section"},{"location":"library/","page":"Library","title":"Library","text":"q_opt\nscarf","category":"page"},{"location":"library/#NewsvendorModel.q_opt","page":"Library","title":"NewsvendorModel.q_opt","text":"q_opt(nvpr::NewsvendorProblem; rounduprule = true)\n\nCompute the quanitity that maximizes expected profit for a newsvendor problem (i.e., where critical fractile equals in-stock probability). Relies on the  equation F⁻¹(q_opt) = criticalfractile. Returns the next integer unless rounduprule=false; then, it returns exact real.\n\n\n\n\n\nRead optimal quantity from a stored result.\n\n\n\n\n\n","category":"function"},{"location":"library/#NewsvendorModel.scarf","page":"Library","title":"NewsvendorModel.scarf","text":"scarf(nvpr::NewsvendorProblem)\n\nCompute the quanitity that maximizes the minimal expected profit among all  distributions with the same mean and variance. Worst-case solution Scarf (1958).\n\n\n\n\n\n","category":"function"},{"location":"library/#Metrics","page":"Library","title":"Metrics","text":"","category":"section"},{"location":"library/","page":"Library","title":"Library","text":"criticalfractile\nprofit\nmissmatch\nlostsales\nsales\nleftover","category":"page"},{"location":"library/#NewsvendorModel.criticalfractile","page":"Library","title":"NewsvendorModel.criticalfractile","text":"criticalfractile(nvpr::NewsvendorProblem)\n\nCompute the critical fractile for a newsvendor problem:\n\ntextrmcritical fractile = fracunderagecostunderage cost + overage cost\n\n\n\n\n\nRead critical fractile from a stored result.\n\n\n\n\n\n","category":"function"},{"location":"library/#NewsvendorModel.profit","page":"Library","title":"NewsvendorModel.profit","text":"profit(nvpr::NewsvendorProblem, q)\n\nCompute expected left over quantity when stocking quantity q.\n\n\n\n\n\nRead expected profit from a stored result.\n\n\n\n\n\n","category":"function"},{"location":"library/#NewsvendorModel.missmatch","page":"Library","title":"NewsvendorModel.missmatch","text":"missmatch(nvpr::NewsvendorProblem, q)\n\nCompute expected missmatch when stocking quantity q.\n\n\n\n\n\n","category":"function"},{"location":"library/#NewsvendorModel.lostsales","page":"Library","title":"NewsvendorModel.lostsales","text":"lostsales(nvpr::NewsvendorProblem, q)\n\nCompute expected lost sales when stocking quantity q.\n\n\n\n\n\nRead expected lost sales from a stored result.\n\n\n\n\n\n","category":"function"},{"location":"library/#NewsvendorModel.sales","page":"Library","title":"NewsvendorModel.sales","text":"sales(nvpr::NewsvendorProblem, q)\n\nCompute expected sales when stocking quantity q.\n\n\n\n\n\nRead expected sales from a stored result.\n\n\n\n\n\n","category":"function"},{"location":"library/#NewsvendorModel.leftover","page":"Library","title":"NewsvendorModel.leftover","text":"leftover(nvpr::NewsvendorProblem, q)\n\nCompute expected left over quantity when stocking quantity q.\n\n\n\n\n\nRead expected left over from a stored result.\n\n\n\n\n\n","category":"function"},{"location":"","page":"Usage","title":"Usage","text":"This is a Julia package for modeling and solving Newsvendor Problems.","category":"page"},{"location":"#Usage","page":"Usage","title":"Usage","text":"","category":"section"},{"location":"","page":"Usage","title":"Usage","text":"The package is not yet listed and must be retrieved from the Github repo.","category":"page"},{"location":"","page":"Usage","title":"Usage","text":"julia> import Pkg\njulia> Pkg.add(url=\"https://github.com/frankhuettner/NewsvendorModel.jl\")","category":"page"},{"location":"","page":"Usage","title":"Usage","text":"After installation, it can be loaded with the usual command.","category":"page"},{"location":"","page":"Usage","title":"Usage","text":"julia> using NewsvendorModel","category":"page"},{"location":"","page":"Usage","title":"Usage","text":"Moreover, you need to load the distributions package.","category":"page"},{"location":"","page":"Usage","title":"Usage","text":"julia> using Distributions","category":"page"},{"location":"","page":"Usage","title":"Usage","text":"You can now define a model with the command NVModel(...) using the following required keyword arguements:","category":"page"},{"location":"","page":"Usage","title":"Usage","text":"unit production cost\nunit selling price\ndemand distribution","category":"page"},{"location":"","page":"Usage","title":"Usage","text":"Solve for optimal quanitity and obtain key metrics with the optimize() function.","category":"page"},{"location":"#Example","page":"Usage","title":"Example","text":"","category":"section"},{"location":"","page":"Usage","title":"Usage","text":"Consider a scenario with unit cost = 1, unit price = 5, the demand function is normal with mean = 90 and stdev = 30. The model is now defined and stored in the variable nvm as follows:","category":"page"},{"location":"","page":"Usage","title":"Usage","text":"julia> nvm = NVModel(1, 5, Normal(90, 30))","category":"page"},{"location":"","page":"Usage","title":"Usage","text":"Next, you can solve the model like so:","category":"page"},{"location":"","page":"Usage","title":"Usage","text":"julia> optimize(nvm)","category":"page"},{"location":"","page":"Usage","title":"Usage","text":"This gives the following output:","category":"page"},{"location":"","page":"Usage","title":"Usage","text":"","category":"page"},{"location":"#Salvage-value,-lost-goodwill,-and-fixed-cost","page":"Usage","title":"Salvage value, lost goodwill, and fixed cost","text":"","category":"section"},{"location":"","page":"Usage","title":"Usage","text":"Let us assume that an unsold unit can be salvaged for 0.3.  Further suppose that an unserved customer might not return and we also miss future profits of 2. Finally, suppose that the operations require a fixed cost of 100. The model is now specified as follows:","category":"page"},{"location":"","page":"Usage","title":"Usage","text":"julia> nvm2 = NVModel(1, 5, Normal(90, 30), salvage = 0.3, badwill = 2, fixcost = 100)","category":"page"},{"location":"","page":"Usage","title":"Usage","text":"julia> optimize(nvm2)","category":"page"}]
}
